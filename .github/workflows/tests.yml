name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should-skip }}
    steps:
      - uses: fkirc/skip-duplicate-actions@v3.4.1
        id: skip-check
        with:
          paths_ignore: '["doc/**"]'

  tests:
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should-skip != 'true' }}
    name: ${{ matrix.os }}, ${{ matrix.python-version }}, ${{ matrix.env }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dev: [false]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        env:
          - ci/env/latest.yaml
        include:
          - env: ci/env/37-minimal.yaml
            os: ubuntu-latest
            dev: false
            python-version: "3.7"
          - env: ci/env/38-minimal.yaml
            os: ubuntu-latest
            dev: false
            python-version: "3.8"
          - env: ci/env/39-minimal.yaml
            os: ubuntu-latest
            dev: false
            python-version: "3.9"
          - env: ci/env/310-minimal.yaml
            os: ubuntu-latest
            dev: false
            python-version: "3.10"
          - env: latest
            os: ubuntu-latest
            dev: false
            python-version: "pypy-3.7"
          - env: latest
            os: ubuntu-latest
            dev: false
            python-version: "pypy-3.8"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - uses: conda-incubator/setup-miniconda@v2
        name: Setup CPython Environment
        if: ${{ ! contains(matrix.python-version, 'pypy') }}
        with:
          miniforge-variant: Mambaforge
          environment-file: ${{ matrix.env }}
          python-version: ${{ matrix.python-version }}
          use-mamba: true

      - uses: actions/setup-python@v2
        name: Setup PyPy Environment
        if: ${{ contains(matrix.python-version, 'pypy') }}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies for PyPy
        if: ${{ contains(matrix.python-version, 'pypy') }}
        run: |
          sudo apt-get update
          sudo apt-get install gdal-bin libgdal-dev

          pip install conda
          pip install .[opt,test]

      - name: Check and Log Environment
        run: make info

      - name: Test with Pytest
        run: make test

      - name: Test Docstrings
        if: ${{ contains(matrix.env, 'latest') && contains(matrix.os, 'ubuntu') && ! contains(matrix.python-version, 'pypy') }}
        run: make doctest

      - uses: codecov/codecov-action@v2.1.0
